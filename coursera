#!/usr/bin/Rscript
#--------------------------------
# Ouesmed 06-02-2019
# cachematrix.R
# example usage:
#> source("cachematrix.R")
#> aSquareMatrix <- makeCacheMatrix(matrix(0:8, 8, 8))
#> squareMatrix$getMatrix()
#> aSquareMatrix$getCache()
#> cacheSolve(aSquareMatrix)
#> aSquareMatrix$getCache()


makeCacheMatrix <- function(x = matrix()) {
   # 'makeCacheMatrix'
   # crée une matrice de cache à partir d'une matrice donnée
   # ----------------------------------------------------- --------
   # 1. initialiser le cache Matrix 'cacheMatrix'
   # assigner la valeur NULL pour la première initialisation
  cacheMatrix <- NULL

  
 # 2. définir la méthode nommée 'setMatrix'
  
  setMatrix <- function(y) {
    x <<- y
    cacheMatrix <<- NULL
  }

 # 3. définir la méthode nommée 'getMatrix'
   # retourne la matrice 'x'
  
  getMatrix <- function() x
  
 # 4. définir la méthode nommée 'setCache'
  
  setCache <- function(inverse) cacheMatrix <<- inverse
  
 # 5. définir la méthode nommée 'getCache'
   # qui renverra l'inverse mis en cache de 'x'
  
  getCache <- function() cacheMatrix
  
 # 6. énumérer les noms de toutes les méthodes qui seront connues du monde extérieur
   # bien que le nom dans cette liste puisse être différent du nom des méthodes définies ci-dessus
   # Je choisis le même nom que les méthodes définies ci-dessus pour plus de simplicité et de cohérence
  
  list(setMatrix = setMatrix,
       getMatrix = getMatrix,
       setCache = setCache,
       getCache = getCache)
  }

cacheSolve <- function(x, ...) {
   # Retourne une matrice qui est l'inverse de 'x'
   # 'cacheSolve'
   # retourne l'inverse d'une matrice donnée en utilisant le cache

   # 1. vérifier le contenu de la matrice de cache
  
  cacheMatrix <- x$getCache()
  
 # 2.si le contenu n'est pas nul, alors: renvoyer le résultat
  
  if (!is.null(cacheMatrix)) {
    message("loading cache matrix...")
    return(cacheMatrix)
  }
  
  # 3. Si le contenu est vide, alors:
  
   # récupère la matrice, crée, définit, met à jour et renvoie la matrice de cache
  
  else {
    dMatrix <- x$getMatrix()
    cacheMatrix <- solve(dMatrix, ...)
    x$setCache(cacheMatrix)
    return(cacheMatrix)
  }
  }
